package im.wilk.vor.item;

import com.google.gson.JsonElement;
import im.wilk.vor.item.model.VorDataItem;
import im.wilk.vor.item.model.VorListItem;
import im.wilk.vor.item.model.VorStructItem;
import im.wilk.vor.item.node.VorPathNode;

import java.math.BigDecimal;
import java.util.List;

public interface VorItem extends
        VorListItem<VorItem>,
        VorStructItem<VorItem>,
        VorDataItem<VorItem> {

    /**
     * Current type of item. ANY - means not specified yet.
     *
     */
    enum ItemType {
        DATA,
        LIST,
        STRUCT,
        ANY
    }

    /**
     * Return ItemType of given item.
     *
     * @return one of enumerated values.
     */
    ItemType getItemType();

    /**
     * Return item from specific path.
     * Item doesn't have to exist in underlying jsonElement and will not be created
     * until set(...) method is called.
     *
     * Path can represent multiple nested levels of data hierarchy.
     *
     * Path format definition depends on parser settings from VorItemFactoryBuilder.
     *
     * E.g. expression:
     *    root.get("top").get("list").get(1).get(3).get("data")
     *
     *  can be entered directly as:
     *   when using pathWithSlashAndColon() (standard)
     *    root.get("top/list:1:3/data")
     *
     *   when using pathWithDotAndBrackets()
     *    root.get("top.list[1][3].data")
     *
     * @param path - path in specific format
     * @return VorItem referencing to specific node in data hierarchy.
     * throws
     *  PathParsingException - when path is invalid (@see PathParsingException)
     * @throws
     *  IllegalStateException - if lenientStructure is disabled and node wasn't of type LIST
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disabled and index in path is greater than (last allocated + 1)
     *
     *  default behaviour is not to throw only PathParsingException and always return valid VorItem.
     */
    VorItem get(String path);

    /**
     * Alternative way of accessing item in data hierarchy using directly list of VorPathNode objects.
     * this list may be generated by direct call to VorPathParser.toNodes() or build manually.
     *
     * @param paths list of nodes
     * @return same as get(path)
     */
    VorItem get(List<VorPathNode> paths);

    /**
     * Return VorItem describing item from list.
     * List doesn't have to exist in underlying ion structure.
     *
     * @param idx 0-based index of list
     * @return VorItem referencing to specific node in data hierarchy
     * @throws
     *  IllegalStateException - if lenientStructure is disabled and node wasn't of type LIST
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disable and index is greater than (last allocated + 1)
     *
     * default - no exception is thrown, list is allocated up to index and filled with nulls.
     */
    VorItem get(int idx);

    /**
     * Set item in list with copy of content from other item.
     *
     * @param idx 0-based index of list
     * @param other VorItem referencing to specific node in data hierarchy
     * @throws
     *  IllegalStateException - if lenientStructure is disabled and node wasn't of type LIST
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disable and index is greater than (last allocated + 1)
     *
     * default - no exception is thrown, list is allocated up to index and filled with nulls.
     */
    void set(int idx, VorItem other);

    /**
     * Add new item to list with copy of content from other item.
     *
     * @param other VorItem referencing to specific node in data hierarchy
     * @throws
     *  IllegalStateException - if lenientStructure is disabled and node wasn't of type LIST
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disable and index is greater than (last allocated + 1)
     *
     *  default - no exception is thrown, list is allocated up to index and filled with nulls.
     */
    void add(VorItem other);

    /**
     * Set (replace if present) item with copy of content from other item.
     *
     * it will use alias (if set in path) or name of item from 'other' item.
     * if 'other' is item from list it will use name of list.
     *
     * @param other VorItem referencing to specific node in data hierarchy
     */
    void set(VorItem other);

    /**
     * Set (replace if present) item specific value.
     * Path can represent multiple  nested levels of data hierarchy.
     *
     * It's a short form of setting data. It has same effect as .get(path).set(value)
     *
     * @param path - path describing position in hierarchy.
     * @param value - value to be set
     * throws
     *  PathParsingException - when path is invalid
     * @throws
     *  IllegalStateException - if lenientStructure is disabled path enforces change of data hierarchy.
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disable and index in path is greater than (last allocated + 1)
     *
     *  default - no exception is thrown.
     */
    void set(String path, String value);

    /**
     * Set (replace if present) item specific value.
     * Path can represent multiple  nested levels of data hierarchy.
     *
     * It's a short form of setting data. It has same effect as .get(path).set(value)
     *
     * @param path - path describing position in hierarchy.
     * @param value - value to be set
     * throws
     *  PathParsingException - when path is invalid
     * @throws
     *  IllegalStateException - if lenientStructure is disabled path enforces change of data hierarchy.
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disable and index in path is greater than (last allocated + 1)
     *
     *  default - no exception is thrown.
     */
    void set(String path, Boolean value);

    /**
     * Set (replace if present) item specific value.
     * Path can represent multiple  nested levels of data hierarchy.
     *
     * It's a short form of setting data. It has same effect as .get(path).set(value)
     *
     * @param path - path describing position in hierarchy.
     * @param value - value to be set
     * throws
     *  PathParsingException - when path is invalid
     * @throws
     *  IllegalStateException - if lenientStructure is disabled path enforces change of data hierarchy.
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disable and index in path is greater than (last allocated + 1)
     *
     *  default - no exception is thrown.
     */
    void set(String path, Number value);

    /**
     * Set (replace if present) item specific value.
     * Path can represent multiple  nested levels of data hierarchy.
     *
     * It's a short form of setting data. It has same effect as .get(path).set(value)
     *
     * @param path - path describing position in hierarchy.
     * @param value - value to be set
     * throws
     *  PathParsingException - when path is invalid
     * @throws
     *  IllegalStateException - if lenientStructure is disabled path enforces change of data hierarchy.
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disable and index in path is greater than (last allocated + 1)
     *
     *  default - no exception is thrown.
     */
    void set(String path, BigDecimal value);

    /**
     * Set (replace if present) item with copy of content from other item.
     * Path can represent multiple nested levels of data hierarchy.
     *
     * It's a short form of setting data. It has same effect as .get(path).set(value)
     *
     * @param path - path describing position in hierarchy.
     * @param other VorItem referencing to specific node in data hierarchy
     * throws
     *  PathParsingException - when path is invalid
     * @throws
     *  IllegalStateException - if lenientStructure is disabled path enforces change of data hierarchy.
     * @throws
     *  IndexOutOfBoundsException - if lenientLists is disable and index in path is greater than (last allocated + 1)
     *
     *  default - no exception is thrown.
     */
    void set(String path, VorItem other);

    /**
     * Sets current item to null.
     * if item was referencing to struct or list entire content will be removed.
     */
    void setNull();

    /**
     * Removes current item from data hierarchy.
     * if item was referencing to struct or list entire content will be removed.
     */
    void remove();

    /**
     * For a list of paths returns a list of VorItems.
     * It does not filter data in any way, so it may return items referencing to non-existent nodes.
     *
     * @param paths list of path expressions (@see get(name))
     * @return list of VorItems
     * throws
     *  PathParsingException - when path is invalid
     */
    List<VorItem> select(String... paths);

    /**
     * Returns VorItem representing container of current item.
     *
     * @return Container or null when called for root item.
     */
    VorItem getContainer();

    /**
     * Returns pathNode describing given item.
     *
     * @return pathNode describing given item.
     */
    VorPathNode getPathNode();

    /**
     * Return full path of current item in format accepted by parser and get(name) method.
     *
     * @return full path
     */
    String getFullPath();

    /**
     *
     * @return
     *    Alias - if was defined in path
     *    Name of item in structure if item is part of structure
     *    Name of list if item is part of list
     *    "" (empty string) if it is a root item.
     */
    String name();

    /**
     * Returns a deep copy of underlying Json including any modifications performed.
     *
     * Items that refer to non-existing data in underlying ion will return JsonNull
     *
     * @return jsonElement data as described.
     */
    JsonElement asJsonElement();

    /**
     * Returns information about presence of given item in underlying Json structure.
     *
     * @return
     *    true - item exists in Json structure and is not null (it may be empty list/struct).
     *    flase - item doesn't exist in Json structure or is null.
     *
     */
    boolean exists();
}
